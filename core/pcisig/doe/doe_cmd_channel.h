// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef DOE_CMD_CHANNEL_H_
#define DOE_CMD_CHANNEL_H_

#include "doe_interface.h"


/**
 * Defines the interface for a DOE communication channel to send and receive DOE messages.
 */
struct doe_cmd_channel {
	/**
	 * Receive a message from a DOE communication channel. This call will block until a message
	 * has been received or the timeout has expired.
	 *
	 * @param channel The channel to receive a message from.
	 * @param message Output for the message pointer being received.
	 * @param ms_timeout The amount of time to wait for a received message, in milliseconds.
	 * A negative value will wait forever, and a value of 0 will return immediately.
	 *
	 * @return 0 if a message was successfully received or an error code.
	 */
	int (*receive_message) (const struct doe_cmd_channel *channel, struct doe_cmd_message **message,
		int ms_timeout);

	/**
	 * Send a message over a DOE communication channel.
	 *
	 * Returning from this function does not guarantee the message has been fully transmitted.
	 * Depending on the channel implementation, it is possible the message is still in flight with
	 * the data buffered in the channel driver.
	 *
	 * @param channel The channel to send a message on.
	 * @param message The message to send.
	 *
	 * @return 0 if the the message was successfully sent or an error code.
	 */
	int (*send_message) (const struct doe_cmd_channel *channel,
		const struct doe_cmd_message *message);
};


int doe_cmd_channel_receive_and_process (const struct doe_cmd_channel *channel,
	const struct doe_interface *doe, int ms_timeout);


#define	DOE_CMD_CHANNEL_ERROR(code)		ROT_ERROR (ROT_MODULE_DOE_CMD_CHANNEL, code)

/**
 * Error codes that can be generated by the DOE command channel.
 */
enum {
	DOE_CMD_CHANNEL_INVALID_ARGUMENT = DOE_CMD_CHANNEL_ERROR (0x00),	/**< Input parameter is null or not valid. */
	DOE_CMD_CHANNEL_NO_MEMORY = DOE_CMD_CHANNEL_ERROR (0x01),			/**< Memory allocation failed. */
	DOE_CMD_CHANNEL_RX_FAILED = DOE_CMD_CHANNEL_ERROR (0x02),			/**< Failed to receive a message. */
	DOE_CMD_CHANNEL_TX_FAILED = DOE_CMD_CHANNEL_ERROR (0x03),			/**< Failed to send a message. */
};


#endif	/* DOE_CMD_CHANNEL_H_ */

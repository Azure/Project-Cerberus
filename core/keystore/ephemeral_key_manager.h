// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef EPHEMERAL_KEY_MANAGER_H_
#define EPHEMERAL_KEY_MANAGER_H_

#include <stdbool.h>
#include <stdint.h>
#include <string.h>
#include "key_cache.h"
#include "platform_api.h"
#include "crypto/ephemeral_key_generation.h"
#include "status/module_id.h"
#include "system/periodic_task.h"


/**
 * Variable context for an ephemeral key manager.
 */
struct ephemeral_key_manager_state {
	platform_clock next;	/**< Time at which the next execution should run. */
	bool next_valid;		/**< Indicate if the next timeout has been initialized. */
};

/**
 * Manager for generation, storage, and retrieval of ephemeral key pairs with a local cache.
 */
struct ephemeral_key_manager {
	struct periodic_task_handler base;				/**< Periodic Task Handler for Ephemeral key manager. */
	struct ephemeral_key_manager_state *state;		/**< Ephemeral key manager state. */
	const struct ephemeral_key_generation *key_gen;	/**< Key Generator object to generate key pairs. */
	const struct key_cache *key_cache;				/**< Key Cache for handling key storage. */
	uint32_t period_ms;								/**< Configurable Time in ms for next execution. */
	size_t key_size;								/**< Key length to use for key pair generation. */
	uint8_t *key;									/**< Temporary buffer for storing generated keys. */
	size_t key_buf_size;							/**< Length of the temporary key buffer. */
};


int ephemeral_key_manager_init (struct ephemeral_key_manager *key_manager,
	struct ephemeral_key_manager_state *state, const struct key_cache *key_cache,
	const struct ephemeral_key_generation *key_gen, uint32_t period_ms, size_t key_size,
	uint8_t *key, size_t key_buf_size);
int ephemeral_key_manager_init_state (const struct ephemeral_key_manager *key_manager);
void ephemeral_key_manager_release (const struct ephemeral_key_manager *key_manager);

int ephemeral_key_manager_get_key (const struct ephemeral_key_manager *key_manager,
	uint16_t requestor_id, uint8_t *key, size_t key_buf_size, size_t *length);
size_t ephemeral_key_manager_get_key_size (const struct ephemeral_key_manager *key_manager);


/**
 * Ephemeral key manager Error code.
 */
#define EPHEMERAL_KEY_MANAGER_ERROR(code)	ROT_ERROR(ROT_MODULE_EPHEMERAL_KEY_MANAGER, code)

/**
 * Error codes that can be generated by the Ephemeral key manager Module.
 */
enum {
	EPHEMERAL_KEY_MANAGER_INVALID_ARGUMENT = EPHEMERAL_KEY_MANAGER_ERROR (0x00),	/**< Input parameter is null or not valid. */
	EPHEMERAL_KEY_MANAGER_NO_MEMORY = EPHEMERAL_KEY_MANAGER_ERROR (0x01),			/**< Memory allocation failure. */
	EPHEMERAL_KEY_MANAGER_INVALID_KEY_TYPE = EPHEMERAL_KEY_MANAGER_ERROR (0x02),	/**< Invalid supported bits for key generation/read  */
	EPHEMERAL_KEY_MANAGER_GET_KEY_FAILED = EPHEMERAL_KEY_MANAGER_ERROR (0x03),		/**< Get key request failed */
};


#endif	/* EPHEMERAL_KEY_MANAGER_H_ */

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef X509_EXTENSION_BUILDER_H_
#define X509_EXTENSION_BUILDER_H_

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include "status/rot_status.h"


/**
 * Descriptor for an X.509 extension to add to a certificate or CSR.
 */
struct x509_extension {
	bool critical;	/**< Indication that the extension should be marked as critical. */

	/**
	 * The OID identifying the extension type. The OID is an encoded value.  It is not wrapped with
	 * ASN.1 tags, but will be properly encoded data for an ASN.1 OBJECT type.
	 */
	const uint8_t *const oid;
	size_t oid_length;	/**< Length of the encoded OID. */

	/**
	 * The data contained in the extension.  This is the raw data to be wrapped as an ASN.1 OCTET
	 * STRING in the extension.
	 */
	const uint8_t *const data;
	size_t data_length;	/**< Length of the extension data. */
};

/**
 * Defines an extension that can be added to an X.509 certificate or CSR.
 */
struct x509_extension_builder {
	/**
	 * Build the extension so that it can be included in an X.509 certificate or CSR.
	 *
	 * @param builder The context to use for creating the extension.
	 * @param extension Output for the extension data.
	 *
	 * @return 0 if the extension was constructed successfully or an error code.
	 */
	int (*build) (const struct x509_extension_builder *builder, struct x509_extension *extension);

	/**
	 * Free any resources used by an extension.
	 *
	 * @param builder The context that will free the extension.  This must be the same context that
	 * originally built the extension.
	 * @param extension The extension to free.
	 */
	void (*free) (const struct x509_extension_builder *builder, struct x509_extension *extension);
};


/* Internal functions for use by derived types. */
void x509_extension_builder_init_extension_descriptor (struct x509_extension *extension,
	bool critical, const uint8_t *oid, size_t oid_length, const uint8_t *data, size_t data_length);


#define	X509_EXTENSION_ERROR(code)		ROT_ERROR (ROT_MODULE_X509_EXTENSION, code)

/**
 * Generic error codes that can be generated by an X.509 extension builder.  Specific extensions are
 * likely to define additional error modules for extension-specific error codes.
 */
enum {
	X509_EXTENSION_INVALID_ARGUMENT = X509_EXTENSION_ERROR (0x00),	/**< Input parameter is null or not valid. */
	X509_EXTENSION_NO_MEMORY = X509_EXTENSION_ERROR (0x01),			/**< Memory allocation failed. */
	X509_EXTENSION_BUILD_FAILED = X509_EXTENSION_ERROR (0x02),		/**< Failed to build the extension data. */
};


#endif	/* X509_EXTENSION_BUILDER_H_ */

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef X509_EXTENSION_BUILDER_EKU_H_
#define X509_EXTENSION_BUILDER_EKU_H_

#include "x509_extension_builder.h"


/**
 * Descriptor for a single OID describing a key usage to be advertised.
 */
struct x509_extension_builder_eku_oid {
	const uint8_t *oid;	/**< An encoded OID representing a key usage to include in the extension. */
	size_t length;		/**< Length of the encoded OID data. */
};

/**
 * Builder for the Extended Key Usage extension.  The extension builder does not rely on any
 * external components or libraries.
 */
struct x509_extension_builder_eku {
	struct x509_extension_builder base;					/**< Base extension builder API. */
	const struct x509_extension_builder_eku_oid *eku;	/**< List of EKU OIDs to include. */
	size_t eku_count;									/**< Number of EKU OIDs in the list. */
	bool critical;										/**< Flag indicating if the extension is critical. */
	uint8_t *ext_buffer;								/**< Buffer to use for building the extension data. */
	size_t ext_length;									/**< Length of the extension data duffer. */
};


int x509_extension_builder_eku_init (struct x509_extension_builder_eku *builder,
	const struct x509_extension_builder_eku_oid *eku, size_t eku_count, bool critical);
int x509_extension_builder_eku_init_with_buffer (
	struct x509_extension_builder_eku *builder, const struct x509_extension_builder_eku_oid *eku,
	size_t eku_count, bool critical, uint8_t *ext_buffer, size_t buffer_length);
void x509_extension_builder_eku_release (
	const struct x509_extension_builder_eku *builder);

size_t x509_extension_builder_eku_get_ext_buffer_length (
	const struct x509_extension_builder_eku_oid *const eku, size_t eku_count);


#define	EKU_EXTENSION_ERROR(code)		ROT_ERROR (ROT_MODULE_EKU_EXTENSION, code)

/**
 * Error codes that can be generated by an Extended Key Usage extension builder.
 */
enum {
	EKU_EXTENSION_INVALID_ARGUMENT = EKU_EXTENSION_ERROR (0x00),	/**< Input parameter is null or not valid. */
	EKU_EXTENSION_NO_MEMORY = EKU_EXTENSION_ERROR (0x01),			/**< Memory allocation failed. */
	EKU_EXTENSION_SMALL_EXT_BUFFER = EKU_EXTENSION_ERROR (0x02),	/**< The extension buffer is too small for the data. */
};


#endif	/* X509_EXTENSION_BUILDER_EKU_H_ */

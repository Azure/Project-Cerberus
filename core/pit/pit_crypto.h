// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

/*
  Developed by AMI Inc. & Colorado State University.
  Contact person: Rakesh Podder. Email: rakeshpodder3@gmail.com
*/

#include <stdint.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <stdbool.h>
#include "crypto/ecc.h"
#include "crypto/ecc_mbedtls.h"
#include "testing/crypto/ecc_testing.h"
#include "mbedtls/ecdh.h"

#define SUCESS 1

/**
 * Core Cyrpto functionalities to perform encrption and decryption.
 */

int pit_keygenstate(size_t key_length, struct ecc_private_key *privkey, struct ecc_public_key *pubkey, int *state);

int pit_secretkey(struct ecc_private_key *privkey, struct ecc_public_key *pubkey, uint8_t *secret, int *state);

int pit_encryption(uint8_t *msg, size_t msg_size, uint8_t *secret, size_t secret_length, uint8_t *AESIV, size_t AESIV_SIZE, uint8_t *tag, uint8_t *ciphertext, int *state);

int pit_decryption(uint8_t *ciphertext, size_t ciphertext_size, uint8_t *secret, size_t secret_length, uint8_t *AESIV, size_t AESIV_SIZE, uint8_t *tag, uint8_t *plaintext, int *state);

/**
 * OTP generation and validation functionalities.
 */
int pit_OTPgen(uint8_t *secret,  size_t secret_size, uint8_t *AESIV, size_t AESIV_SIZE, uint8_t *tag, uint8_t *OTP, size_t OTPSize, uint8_t *OTPs, int *state);

int pit_OTPvalidation(uint8_t * secret, size_t secret_size, uint8_t *AESIV, size_t AESIV_SIZE, uint8_t *tag, uint8_t *OTPs, size_t OTPs_size, uint8_t *valOTP, bool *result, int *state);

#define	PIT_CRYPTO_ERROR(code)		ROT_ERROR (ROT_MODULE_PIT_CRYPTO, code)

/**
 * Error codes that can be generated by a hash or HMAC engine.
 */
enum {
  PIT_CRYPTO_DECRYPTION_FAILED = PIT_CRYPTO_ERROR (0x00),	/** Decryption failed*/
  PIT_CRYPTO_ENCRYPTION_FAILED = PIT_CRYPTO_ERROR (0x01),	/** Encryption failed*/
  PIT_CRYPTO_SECRET_KEY_NOT_EXPECTED_LENGTH = PIT_CRYPTO_ERROR (0x02), /** Failed to compute secret key*/
  PIT_CRYPTO_KEY_GENERATION_FAILED = PIT_CRYPTO_ERROR (0x03), /** Failed to generate a keypair*/
  PIT_CRYPTO_OTP_GENERATION_FAILED = PIT_CRYPTO_ERROR (0x04),
  PIT_CRYPTO_OTP_INVALID = PIT_CRYPTO_ERROR (0x05), /** SHOULD ALSO BE ERROR*/
};
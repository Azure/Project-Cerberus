// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef PERIODIC_TASK_H_
#define PERIODIC_TASK_H_

#include <stddef.h>
#include <stdint.h>
#include "platform_api.h"
#include "status/rot_status.h"


/**
 * Interface to a handler for executing actions from the task context.
 */
struct periodic_task_handler {
	/**
	 * Prepare a handler to be ready for execution.  This will get called once per handler once the
	 * task has been started and before the handler will be executed.  This gets called from the
	 * context of the execution task.
	 *
	 * This can be set to null if the handler does not require any preparation before execution.
	 * However, most handlers will need this to initialize the timeout for the first execution.
	 *
	 * @param handler The handler being prepared for execution.  This will never be null.
	 */
	void (*prepare) (const struct periodic_task_handler *handler);

	/**
	 * Get the time at which the handler next needs to be executed.
	 *
	 * @param handler The handler to query.  This will never be null.
	 *
	 * @return The next time to run this handler.  If this is null, the handler is ready to be run
	 * immediately.
	 */
	const platform_clock* (*get_next_execution) (const struct periodic_task_handler *handler);

	/**
	 * Execute the handler.  Pointers provided to this function will never be null.
	 *
	 * @param handler The handler to execute.  This will never be null.
	 */
	void (*execute) (const struct periodic_task_handler *handler);
};


void periodic_task_prepare_handlers (const struct periodic_task_handler **handlers, size_t count);
int periodic_task_execute_next_handler (const struct periodic_task_handler **handlers,
	size_t count);


#define	PERIODIC_TASK_ERROR(code)		ROT_ERROR (ROT_MODULE_PERIODIC_TASK, code)

/**
 * Error codes that can be generated by a periodic task.
 */
enum {
	PERIODIC_TASK_INVALID_ARGUMENT = PERIODIC_TASK_ERROR (0x00),	/**< Input parameter is null or not valid. */
	PERIODIC_TASK_NO_MEMORY = PERIODIC_TASK_ERROR (0x01),			/**< Memory allocation failed. */
	PERIODIC_TASK_NO_HANDLERS = PERIODIC_TASK_ERROR (0x02),			/**< A list of handlers only contains null pointers. */
};


#endif	/* PERIODIC_TASK_H_ */

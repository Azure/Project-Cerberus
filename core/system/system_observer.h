// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef SYSTEM_OBSERVER_H_
#define SYSTEM_OBSERVER_H_

#include "status/rot_status.h"


/**
 * Interface for notifying observers of system events.  Unwanted event notifications will be set to
 * null.
 */
struct system_observer {
	/**
	 * Notification that the processor is about to reset.  Observers of this notification have the
	 * opportunity to delay reset until operations that are in progress have completed or to ensure
	 * persistent data has been saved.
	 *
	 * Arguments passed with the notification will never be null.
	 *
	 * @param observer The observer instance being notified.
	 */
	void (*on_shutdown) (struct system_observer *observer);

	/**
	 * Notification that the processor failed to complete the shutdown process and reset.  This
	 * provides observers the opportunity to revert any operations that were done in response to the
	 * previous shutdown notification.
	 *
	 * Arguments passed with the notification will never be null.
	 *
	 * @param observer The observer instance being notified.
	 */
	void (*on_shutdown_failed) (struct system_observer *observer);
};


#define	SYSTEM_OBSERVER_ERROR(code)		ROT_ERROR (ROT_MODULE_SYSTEM_OBSERVER, code)

/**
 * Error codes that can be generated by a system observer.
 */
enum {
	SYSTEM_OBSERVER_INVALID_ARGUMENT = SYSTEM_OBSERVER_ERROR (0x00),	/**< Input parameter is null or not valid. */
	SYSTEM_OBSERVER_NO_MEMORY = SYSTEM_OBSERVER_ERROR (0x01),			/**< Memory allocation failed. */
};


#endif	/* SYSTEM_OBSERVER_H_ */

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef REAL_TIME_CLOCK_H_
#define REAL_TIME_CLOCK_H_

#include <stdint.h>
#include "status/rot_status.h"


/**
 * Defines the API for accessing a real time clock.
 */
struct real_time_clock {
	/**
	 * Gets the current timestamp of the clock.
	 *
	 * @param rtc The real time clock instance.
	 * @param msec The output of the clock in milliseconds.  It is up to the caller to interpret
	 * what this value represents.  If an error occurs during processing, it will not modify the
	 * output variable.
	 *
	 * @return 0 if successful, else an error code.
	 */
	int (*get_time) (const struct real_time_clock *rtc, uint64_t *msec);

	/**
	 * Sets the current time of the clock.
	 *
	 * This can be NULL if setting the time is unsupported.
	 *
	 * @param rtc The real time clock instance.
	 * @param msec The value to set the clock in milliseconds.  Just like get_time, it is up to the
	 * caller to know what this value represents.
	 *
	 * @return 0 if successful, else an error code.
	 */
	int (*set_time) (const struct real_time_clock *rtc, uint64_t msec);
};


/* Internal functions for use by derived types. */

int real_time_clock_set_time_unsupported (const struct real_time_clock *rtc, uint64_t msec);


#define REAL_TIME_CLOCK_ERROR(code)		ROT_ERROR (ROT_MODULE_REAL_TIME_CLOCK, code)

/**
 * Error codes that can be generated by the real time clock driver.
 */
enum {
	REAL_TIME_CLOCK_INVALID_ARGUMENT = REAL_TIME_CLOCK_ERROR (0x00),	/**< Input parameter is null or not valid. */
	REAL_TIME_CLOCK_NO_MEMORY = REAL_TIME_CLOCK_ERROR (0x01),			/**< Memory allocation failed. */
	REAL_TIME_CLOCK_GET_TIME_FAILED = REAL_TIME_CLOCK_ERROR (0x02),		/**< Get time operation failed. */
	REAL_TIME_CLOCK_SET_TIME_FAILED = REAL_TIME_CLOCK_ERROR (0x03),		/**< Set time operation failed. */
	REAL_TIME_CLOCK_UNSUPPORTED = REAL_TIME_CLOCK_ERROR (0x04),			/**< Operation is unsupported. */
	REAL_TIME_CLOCK_SET_BLOCKED = REAL_TIME_CLOCK_ERROR (0x05),			/**< Set time was called too quickly from the last call. */
	REAL_TIME_CLOCK_OUT_OF_RANGE = REAL_TIME_CLOCK_ERROR (0x06),		/**< Time value is out of range. */
	REAL_TIME_CLOCK_READ_TIMEOUT = REAL_TIME_CLOCK_ERROR (0x07),		/**< Timeout while trying to read RTC values. */
	REAL_TIME_CLOCK_WRITE_TIMEOUT = REAL_TIME_CLOCK_ERROR (0x08),		/**< Timeout while trying to write RTC values. */
};


#endif	/* REAL_TIME_CLOCK_H_ */

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef AES_XTS_H_
#define AES_XTS_H_

#include <stddef.h>
#include <stdint.h>
#include "status/rot_status.h"


/**
 * A platform-independent API for encrypting data using AES-XTS.  AES-XTS engine instances are not
 * guaranteed to be thread-safe.
 */
struct aes_xts_engine {
	/**
	 * Set the key to use for AES-XTS operations.  This must be called at least once before any
	 * encryption or decryption operation can be performed, and again if a different key should be
	 * used.
	 *
	 * @param engine The AES-XTS engine to configure.
	 * @param key The encryption key to use.  This buffer contains the concatenated pair of keys
	 * needed for the XTS operations (key1 || key2).  The key does not need to remain in scope for
	 * encryption and decryption operations.
	 * @param length The length of the concatenated key.  Each individual key will be equal to half
	 * the total length.
	 *
	 * @return 0 if the AES key was configured successfully or an error code.
	 */
	int (*set_key) (const struct aes_xts_engine *engine, const uint8_t *key, size_t length);

	/**
	 * Erase the key being used for AES-XTS operations.  A new key will need to be set before any
	 * additional encryption operations can be performed.
	 *
	 * @param engine the AES-XTS engine to configure.
	 *
	 * @return 0 if the AES key was cleared successfully or an error code.
	 */
	int (*clear_key) (const struct aes_xts_engine *engine);

	/**
	 * Encrypt data using AES-XTS mode.  The engine must be provided with a key prior to calling
	 * this function.
	 *
	 * @param engine The AES-XTS engine to use for encryption.
	 * @param plaintext The data to encrypt.
	 * @param length The amount of data to encrypt.  This must be one full data unit.  Encrypting
	 * multiple data units require multiple calls.
	 * @param data_unit_id Unique identifier for the data unit being encrypted.  This value is
	 * encoded as a little endian value in a 16-byte array.
	 * @param ciphertext The buffer to hold the encrypted data.  The ciphertext will be the same
	 * length as the plaintext.  This buffer may be the same as the input plaintext buffer.
	 * @param out_length The size of the output buffer.
	 *
	 * @return 0 if the data was encrypted successfully or an error code.
	 */
	int (*encrypt_data) (const struct aes_xts_engine *engine, const uint8_t *plaintext,
		size_t length, const uint8_t data_unit_id[16], uint8_t *ciphertext, size_t out_length);

	/**
	 * Decrypt data using AES-XTS mode.  The engine must be provided with a key prior to calling
	 * this function.
	 *
	 * @param engine The AES-XTS engine to use for decryption.
	 * @param ciphertext The encrypted data to decrypt.
	 * @param length The length of the encrypted data.  This must be one full data unit.  Decrypting
	 * multiple data units require multiple calls.
	 * @param data_unit_id Unique identifier for the data unit being decrypted.  This value is
	 * encoded as a little endian value in a 16-byte array.
	 * @param plaintext The buffer to hold the decrypted data.  The plaintext will be the same
	 * length as the ciphertext.  This buffer may be the same as the input ciphertext buffer.
	 * @param out_length The size of the output buffer.
	 *
	 * @return 0 if the data was decrypted successfully or an error code.
	 */
	int (*decrypt_data) (const struct aes_xts_engine *engine, const uint8_t *ciphertext,
		size_t length, const uint8_t data_unit_id[16], uint8_t *plaintext, size_t out_length);
};


void aes_xts_flash_address_to_data_unit_id (uint32_t address, uint8_t data_unit_id[16]);


#define	AES_XTS_ENGINE_ERROR(code)		ROT_ERROR (ROT_MODULE_AES_XTS_ENGINE, code)

/**
 * Error codes that can be generated by an AES-XTS engine.
 */
enum {
	AES_XTS_ENGINE_INVALID_ARGUMENT = AES_XTS_ENGINE_ERROR (0x00),			/**< Input parameter is null or not valid. */
	AES_XTS_ENGINE_NO_MEMORY = AES_XTS_ENGINE_ERROR (0x01),					/**< Memory allocation failed. */
	AES_XTS_ENGINE_SET_KEY_FAILED = AES_XTS_ENGINE_ERROR (0x02),			/**< The encryption key could not be set. */
	AES_XTS_ENGINE_ENCRYPT_FAILED = AES_XTS_ENGINE_ERROR (0x03),			/**< The ciphertext was not decrypted. */
	AES_XTS_ENGINE_DECRYPT_FAILED = AES_XTS_ENGINE_ERROR (0x04),			/**< The plaintext was not encrypted. */
	AES_XTS_ENGINE_UNSUPPORTED_KEY_LENGTH = AES_XTS_ENGINE_ERROR (0x05),	/**< The encryption key length is not supported by the engine. */
	AES_XTS_ENGINE_INVALID_KEY_LENGTH = AES_XTS_ENGINE_ERROR (0x06),		/**< The key length is not a valid AES-XTS key length. */
	AES_XTS_ENGINE_MATCHING_KEYS = AES_XTS_ENGINE_ERROR (0x07),				/**< XTS key 1 and key 2 are the same. */
	AES_XTS_ENGINE_UNSUPPORTED_DATA_LENGTH = AES_XTS_ENGINE_ERROR (0x08),	/**< The data unit length is not supported by the engine. */
	AES_XTS_ENGINE_INVALID_DATA_LENGTH = AES_XTS_ENGINE_ERROR (0x09),		/**< The data unit length is not valid for AES-XTS. */
	AES_XTS_ENGINE_OUT_BUFFER_TOO_SMALL = AES_XTS_ENGINE_ERROR (0x0a),		/**< Not enough space in an output buffer provided for the operation. */
	AES_XTS_ENGINE_NO_KEY = AES_XTS_ENGINE_ERROR (0x0b),					/**< No key was set prior to encryption/decryption. */
	AES_XTS_ENGINE_HW_NOT_INIT = AES_XTS_ENGINE_ERROR (0x0c),				/**< The AES hardware has not been initialized. */
	AES_XTS_ENGINE_SELF_TEST_FAILED = AES_XTS_ENGINE_ERROR (0x0d),			/**< An internal self-test of the AES engine failed. */
	AES_XTS_ENGINE_UNSUPPORTED_OPERATION = AES_XTS_ENGINE_ERROR (0x0e),		/**< The requested operation is not supported. */
	AES_XTS_ENGINE_CLEAR_KEY_FAILED = AES_XTS_ENGINE_ERROR (0x0c),			/**< The encryption key could not be zeroized. */
};


#endif	/* AES_XTS_H_ */

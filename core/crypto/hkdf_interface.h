// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef HKDF_INTERFACE_H_
#define HKDF_INTERFACE_H_

#include <stddef.h>
#include <stdint.h>
#include "crypto/hash.h"
#include "status/rot_status.h"


/**
 * Common interface for executing HMAC-based key derivations (HKDF) as defined in RFC 5869.  HKDF
 * instances are not guaranteed to be thread-safe.
 */
struct hkdf_interface {
	/**
	 * Extract the pseudorandom key (PRK) from the input keying material (IKM) to use for subsequent
	 * key derivations.  Any previous PRK generated will be erased.
	 *
	 * The PRK will not be provided to the caller.
	 *
	 * @param hkdf The HKDF instance that will operation on the provided keying material.
	 * @param hash_algo The type of hash to use for the HKDF.  The same hash algorithm will be used
	 * during key derivations.
	 * @param ikm The input keying material to use to generate the PRK.
	 * @param length Length of the IKM.
	 * @param salt Optional salt to use when generating the PRK.  If this is null, a salt containing
	 * all zeros will be used.  The length argument will be ignored.
	 * @param salt_length Length of the optional salt.  If this is zero, the salt argument is
	 * ignored (but it cannot be null) and a salt of zero-length is used.
	 *
	 * @param 0 if the PRK was generated successfully or an error code.
	 */
	int (*extract) (const struct hkdf_interface *hkdf, enum hash_type hash_algo, const uint8_t *ikm,
		size_t length, const uint8_t *salt, size_t salt_length);

	/**
	 * Expand the pseudorandom key (PRK) to derive a new key.
	 *
	 * @param hkdf The HKDF instance that contains the PRK to use for key derivation.
	 * @param info Optional KDF context to use during derivation.  If this is null, no additional
	 * context will be used.
	 * @param info_length Length of the optional info.  If the info is null, this value will be
	 * ignored.
	 * @param key_out Output for the new key derived from the PRK.
	 * @param key_length Length of the key to derive.
	 *
	 * @return 0 if the key derivation was successful or an error code.
	 */
	int (*expand) (const struct hkdf_interface *hkdf, const uint8_t *info, size_t info_length,
		uint8_t *key_out, size_t key_length);

	/**
	 * Update the pseudorandom key (PRK) inplace. It takes info context and runs expand operation
	 * using current PRK, generates new key and then updates current PRK with newly generated key.
	 * This scenario is useful when result of expand operation is used as PRK for the next expand
	 * operation.
	 *
	 * @param hkdf The HKDF instance that contains the PRK to use for key derivation.
	 * @param info Optional KDF context to use during derivation.  If this is null, no additional
	 * context will be used.
	 * @param info_length Length of the optional info.  If the info is null, this value will be
	 * ignored.
	 *
	 * @return 0 if the PRK was successfully updated or an error code.
	 */
	int (*update_prk) (const struct hkdf_interface *hkdf, const uint8_t *info, size_t info_length);

	/**
	 * Zeroize the pseudorandom key (PRK) and prevent future attempts to derive keys.
	 *
	 * @param hkdf The HKDF instance to clear.
	 *
	 * @return 0 if the PRK was zeroized or an error code.
	 */
	int (*clear_prk) (const struct hkdf_interface *hkdf);
};


#define	HKDF_ERROR(code)		ROT_ERROR (ROT_MODULE_HKDF, code)

/**
 * Error codes that can be generated by an HKDF implementation.
 */
enum {
	HKDF_INVALID_ARGUMENT = HKDF_ERROR (0x00),	/**< Input parameter is null or not valid. */
	HKDF_NO_MEMORY = HKDF_ERROR (0x01),			/**< Memory allocation failed. */
	HKDF_EXTRACT_FAILED = HKDF_ERROR (0x02),	/**< Failed to extract the PRK. */
	HKDF_EXPAND_FAILED = HKDF_ERROR (0x03),		/**< Failed to derive a new key. */
	HKDF_CLEAR_PRK_FAILED = HKDF_ERROR (0x04),	/**< Failed to clear the PRK. */
	HKDF_NO_PRK_AVAILABLE = HKDF_ERROR (0x05),	/**< The PRK has not been extracted for use in key derivations. */
	HKDF_SHA1_KAT_FAILED = HKDF_ERROR (0x06),	/**< Failed a SHA-1 HKDF-Expand self test. */
	HKDF_SHA256_KAT_FAILED = HKDF_ERROR (0x07),	/**< Failed a SHA-256 HKDF-Expand self test. */
	HKDF_SHA384_KAT_FAILED = HKDF_ERROR (0x08),	/**< Failed a SHA-384 HKDF-Expand self test. */
	HKDF_SHA512_KAT_FAILED = HKDF_ERROR (0x09),	/**< Failed a SHA-512 HKDF-Expand self test. */
	HKDF_UPDATE_PRK_FAILED = HKDF_ERROR (0x0A),	/**< Failed to update PRK. */
};


#endif	/* HKDF_INTERFACE_H_ */

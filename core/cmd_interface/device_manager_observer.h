// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef DEVICE_MANAGER_OBSERVER_H_
#define DEVICE_MANAGER_OBSERVER_H_


/**
 * Interface for notifying observers of device manager events.  Unwanted event notifications will be set to
 * null.
 */
struct device_manager_observer {
	/**
	 * Notification that the EID is set.  Observers of this notification have the
	 * opportunity to ensure app_context has been saved.
	 *
	 * Arguments passed with the notification will never be null.
	 *
	 * @param observer The observer instance being notified.
	 */
	void (*on_set_eid) (struct device_manager_observer *observer, int *eid);
};


#define	DEVICE_MANAGER_OBSERVER_ERROR(code)		ROT_ERROR (ROT_MODULE_DEVICE_MANAGER_OBSERVER, code)

/**
 * Error codes that can be generated by a device manager observer.
 */
enum {
	DEVICE_MANAGER_OBSERVER_INVALID_ARGUMENT = DEVICE_MANAGER_OBSERVER_ERROR (0x00),	/**< Input parameter is null or not valid. */
	DEVICE_MANAGER_NO_MEMORY = DEVICE_MANAGER_OBSERVER_ERROR (0x01),					/**< Memory allocation failed. */
};


#endif	/* DEVICE_MANAGER_OBSERVER_H_ */

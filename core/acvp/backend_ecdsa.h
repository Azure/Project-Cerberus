// Copyright (c) Microsoft Corporation. All rights reserved.

#ifndef BACKEND_ECDSA_H_
#define BACKEND_ECDSA_H_

#include <stdbool.h>
#include <stddef.h>
#include "crypto/ecc.h"
#include "crypto/ecc_hw.h"
#include "crypto/hash.h"
#include "parser/parser_ecdsa.h"
#include "status/rot_status.h"


/**
 * ECDSA key generation types.
 */
enum backend_ecdsa_keygen_type {
	BACKEND_ECDSA_KEYGEN_TYPE_KEYGEN_UNSUPPORTED = 0,	/**< Key generation is not supported. */
	BACKEND_ECDSA_KEYGEN_TYPE_EXTRA_ENTROPY,			/**< Key generation with extra entropy (FIPS 186-4 B.4.1). */
	BACKEND_ECDSA_KEYGEN_TYPE_TESTING_CANDIDATES,		/**< Key generation with testing candidates (FIPS 186-4 B.4.2). */
};

/**
 * ECDSA component types.
 */
enum backend_ecdsa_component_type {
	BACKEND_ECDSA_COMPONENT_TYPE_FULL = 0,	/**< Full ECDSA signature testing.  This includes hashing of the message input. */
	BACKEND_ECDSA_COMPONENT_TYPE_COMPONENT,	/**< ECDSA component testing.  This type assumes that the input message is a digest. */
};

/**
 * ECDSA API types.
 */
enum backend_ecdsa_api_type {
	BACKEND_ECDSA_API_TYPE_MESSAGE = 0,		/**< Use ECDSA APIs operating on a raw message input. */
	BACKEND_ECDSA_API_TYPE_HASH_AND_FINISH,	/**< Use ECDSA APIs operating on an active hash context. */
};

/**
 * Backend ECDSA engine structure used for ACVP test handling.  The underlying ECC implementation
 * can be either a hardware accelerator or a software engine.
 */
struct backend_ecdsa_engine {
	int impl_id;								/**< Implementation identifier. */
	bool is_hw;									/**< Flag indicating if the ECC interface is the ECC HW or the ECC engine. */
	union {
		const struct ecc_hw *hw;				/**< ECC HW instance to use. */
		const struct ecc_engine *engine;		/**< ECC engine instance to use. */
	} ecc;
	const struct hash_engine *hash;				/**< Hash engine instance to use. */
	enum backend_ecdsa_keygen_type keygen_type;	/**< Key generation type used by this engine. */
	enum backend_ecdsa_api_type api_type;		/**< API type used by this engine. */
};


const struct ecdsa_backend* backend_ecdsa_get_impl ();


void backend_ecdsa_register_engines (const struct backend_ecdsa_engine *ecdsa, size_t num_engines);
void backend_ecdsa_register_impl (void);


#define BACKEND_ECDSA_ERROR(code)		ROT_ERROR (ROT_MODULE_BACKEND_ECDSA, code)

/**
 * Error codes that can be generated by backend ECDSA handling.
 */
enum {
	BACKEND_ECDSA_INVALID_ARGUMENT = BACKEND_ECDSA_ERROR (0x00),		/**< Input parameter is null or not valid. */
	BACKEND_ECDSA_NO_MEMORY = BACKEND_ECDSA_ERROR (0x01),				/**< Memory allocation failed. */
	BACKEND_ECDSA_NO_ENGINE = BACKEND_ECDSA_ERROR (0x02),				/**< No ECDSA engine is available. */
	BACKEND_ECDSA_ENGINE_NOT_FOUND = BACKEND_ECDSA_ERROR (0x03),		/**< No ECDSA engine found for the specified implementation. */
	BACKEND_ECDSA_KEYGEN_TYPE_UNSUPPORTED = BACKEND_ECDSA_ERROR (0x04),	/**< Key generation type is not supported. */
	BACKEND_ECDSA_HASH_TYPE_UNSUPPORTED = BACKEND_ECDSA_ERROR (0x05),	/**< Hash type is not supported. */
	BACKEND_ECDSA_CURVE_TYPE_UNSUPPORTED = BACKEND_ECDSA_ERROR (0x06),	/**< ECC curve type is not supported. */
	BACKEND_ECDSA_KEYGEN_FAILED = BACKEND_ECDSA_ERROR (0x07),			/**< Key generation failed. */
	BACKEND_ECDSA_SIGGEN_FAILED = BACKEND_ECDSA_ERROR (0x08),			/**< Signature generation failed. */
	BACKEND_ECDSA_SIGVER_FAILED = BACKEND_ECDSA_ERROR (0x09),			/**< Signature verification failed. */
	BACKEND_ECDSA_PKVVER_FAILED = BACKEND_ECDSA_ERROR (0x0A),			/**< Public key verification failed. */
};


#endif	/* BACKEND_ECDSA_H_ */

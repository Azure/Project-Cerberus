// Copyright (c) Microsoft Corporation. All rights reserved.

#ifndef BACKEND_SYM_H_
#define BACKEND_SYM_H_

#include <stddef.h>
#include "crypto/aes_key_wrap_interface.h"
#include "parser/parser_sym.h"


/**
 * Symmetric cipher engine type.
 */
enum backend_sym_engine_type {
	BACKEND_SYM_ENGINE_TYPE_AES_KW = 0,	/**< AES key wrap engine. */
	BACKEND_SYM_ENGINE_TYPE_AES_KWP,	/**< AES key wrap with padding engine. */
};

/**
 * Backend symmetric cipher engine structure used for ACVP test handling.
 */
struct backend_sym_engine {
	int impl_id;									/**< Implementation identifier. */
	const struct aes_key_wrap_interface *aes_kw;	/**< AES-KW interface to use. */
	enum backend_sym_engine_type type;				/**< Type of symmetric cipher engine. */
};


const struct sym_backend* backend_sym_get_impl ();


void backend_sym_register_engines (const struct backend_sym_engine *sym, size_t num_engines);
void backend_sym_register_impl (void);


#define BACKEND_SYM_ERROR(code)		ROT_ERROR (ROT_MODULE_BACKEND_SYM, code)

/**
 * Error codes that can be generated by backend symmetric cipher handling.
 */
enum {
	BACKEND_SYM_INVALID_ARGUMENT = BACKEND_SYM_ERROR (0x00),		/**< Input parameter is null or not valid. */
	BACKEND_SYM_NO_MEMORY = BACKEND_SYM_ERROR (0x01),				/**< Memory allocation failed. */
	BACKEND_SYM_NO_ENGINE = BACKEND_SYM_ERROR (0x02),				/**< No symmetric cipher engine is available. */
	BACKEND_SYM_ENGINE_NOT_FOUND = BACKEND_SYM_ERROR (0x03),		/**< No symmetric cipher engine found for the specified implementation. */
	BACKEND_SYM_ENCRYPT_FAILED = BACKEND_SYM_ERROR (0x04),			/**< Symmetric cipher encryption failed. */
	BACKEND_SYM_DECRYPT_FAILED = BACKEND_SYM_ERROR (0x05),			/**< Symmetric cipher decryption failed. */
	BACKEND_SYM_MCT_INIT_FAILED = BACKEND_SYM_ERROR (0x06),			/**< MCT initialization failed. */
	BACKEND_SYM_MCT_UPDATE_FAILED = BACKEND_SYM_ERROR (0x07),		/**< MCT update failed. */
	BACKEND_SYM_MCT_FINI_FAILED = BACKEND_SYM_ERROR (0x08),			/**< MCT finalization failed. */
	BACKEND_SYM_UNSUPPORTED_CIPHER_TYPE = BACKEND_SYM_ERROR (0x09),	/**< Unsupported symmetric cipher type. */
};


#endif	/* BACKEND_SYM_H_ */

// Copyright (c) Microsoft Corporation. All rights reserved.

#ifndef BACKEND_RSA_H_
#define BACKEND_RSA_H_

#include <stddef.h>
#include "crypto/rsa.h"
#include "parser/parser_rsa.h"


/**
 * Backend RSA engine structure used for ACVP test handling.
 */
struct backend_rsa_engine {
	int impl_id;						/**< Implementation identifier. */
	bool random_e_supported;			/**< Flag indicating if random E generation is supported. */
	const struct rsa_engine *engine;	/**< RSA instance to use. */
};


const struct rsa_backend* backend_rsa_get_impl ();


void backend_rsa_register_engines (const struct backend_rsa_engine *rsa, size_t num_engines);
void backend_rsa_register_impl (void);


#define BACKEND_RSA_ERROR(code)		ROT_ERROR (ROT_MODULE_BACKEND_RSA, code)

/**
 * Error codes that can be generated by backend RSA handling.
 */
enum {
	BACKEND_RSA_INVALID_ARGUMENT = BACKEND_RSA_ERROR (0x00),		/**< Input parameter is null or not valid. */
	BACKEND_RSA_NO_MEMORY = BACKEND_RSA_ERROR (0x01),				/**< Memory allocation failed. */
	BACKEND_RSA_NO_ENGINE = BACKEND_RSA_ERROR (0x02),				/**< No RSA engine is available. */
	BACKEND_RSA_ENGINE_NOT_FOUND = BACKEND_RSA_ERROR (0x03),		/**< No RSA engine found for the specified implementation. */
	BACKEND_RSA_RANDOM_E_UNSUPPORTED = BACKEND_RSA_ERROR (0x04),	/**< Random E generation is not supported. */
	BACKEND_RSA_INVALID_KEY = BACKEND_RSA_ERROR (0x05),				/**< The generated RSA key is invalid. */
	BACKEND_RSA_KEY_LEN_TOO_LARGE = BACKEND_RSA_ERROR (0x06),		/**< The given RSA key length is too large. */
};


#endif	/* BACKEND_RSA_H_ */

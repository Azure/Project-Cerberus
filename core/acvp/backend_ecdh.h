// Copyright (c) Microsoft Corporation. All rights reserved.

#ifndef BACKEND_ECDH_H_
#define BACKEND_ECDH_H_

#include <stdbool.h>
#include <stddef.h>
#include "crypto/ecc.h"
#include "crypto/ecc_hw.h"
#include "parser/parser_ecdh.h"


/**
 * Backend ECDH engine structure used for ACVP test handling.
 */
struct backend_ecdh_engine {
	int impl_id;							/**< Implementation identifier. */
	bool is_hw;								/**< Flag indicating if the ECC interface is the ECC HW or the ECC engine. */
	union {
		const struct ecc_hw *hw;			/**< ECC HW instance to use. */
		const struct ecc_engine *engine;	/**< ECC engine instance to use. */
	} ecc;
};


const struct ecdh_backend* backend_ecdh_get_impl ();


void backend_ecdh_register_engines (const struct backend_ecdh_engine *ecdh, size_t num_engines);
void backend_ecdh_register_impl (void);


#define BACKEND_ECDH_ERROR(code)		ROT_ERROR (ROT_MODULE_BACKEND_ECDH, code)

/**
 * Error codes that can be generated by backend ECDH handling.
 */
enum {
	BACKEND_ECDH_INVALID_ARGUMENT = BACKEND_ECDH_ERROR (0x00),			/**< Input parameter is null or not valid. */
	BACKEND_ECDH_NO_MEMORY = BACKEND_ECDH_ERROR (0x01),					/**< Memory allocation failed. */
	BACKEND_ECDH_NO_ENGINE = BACKEND_ECDH_ERROR (0x02),					/**< No ECDH engine is available. */
	BACKEND_ECDH_ENGINE_NOT_FOUND = BACKEND_ECDH_ERROR (0x03),			/**< No ECDH engine found for the specified implementation. */
	BACKEND_ECDH_SS_FAILED = BACKEND_ECDH_ERROR (0x04),					/**< ECDH shared secret generation failed. */
	BACKEND_ECDH_SS_VER_FAILED = BACKEND_ECDH_ERROR (0x05),				/**< ECDH shared secret verification failed. */
	BACKEND_ECDH_CURVE_TYPE_UNSUPPORTED = BACKEND_ECDH_ERROR (0x06),	/**< ECC curve type is not supported. */
};


#endif	/* BACKEND_ECDH_H_ */

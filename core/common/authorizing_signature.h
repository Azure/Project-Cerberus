// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef AUTHORIZING_SIGNATURE_H_
#define AUTHORIZING_SIGNATURE_H_

#include <stddef.h>
#include <stdint.h>
#include "status/rot_status.h"


/**
 * Interface for extracting details about the authorizing signature on an authorized data payload
 * used for authorizing protected operations.  This will not retrieve any information about the
 * signature on any authorization token contained in the payload.
 */
struct authorizing_signature {
	/**
	 * Retrieve the authorizing signature contained in the authorized data payload.
	 *
	 * @param auth The authorizing signature parser.
	 * @param data The authorized data payload to parse.
	 * @param length Length of the authorized data.
	 * @param signature Output for the authorizing signature for the payload.  This will be a
	 * pointer to a location in the data buffer.
	 * @param sig_length Output for the length of the authorizing signature.
	 *
	 * @return 0 if the signature was retrieved successfully or an error code.
	 */
	int (*get_signature) (const struct authorizing_signature *auth, const uint8_t *data,
		size_t length, const uint8_t **signature, size_t *sig_length);

	/**
	 * Determine the authorizing signature length for the authorized data.
	 *
	 * @param auth The authorizing signature parser.
	 * @param data The authorized data payload to parse.
	 * @param length Length of the authorized data.
	 * @param sig_length Output for the length of the authorizing signature.
	 *
	 * @return 0 if the signature length was determined successfully or an error code.
	 */
	int (*get_signature_length) (const struct authorizing_signature *auth, const uint8_t *data,
		size_t length, size_t *sig_length);
};


#define	AUTH_SIGNATURE_ERROR(code)		ROT_ERROR (ROT_MODULE_AUTH_SIGNATURE, code)

/**
 * Error codes that can be generated by authorizing signature handling.
 */
enum {
	AUTH_SIGNATURE_INVALID_ARGUMENT = AUTH_SIGNATURE_ERROR (0x00),	/**< Input parameter is null or not valid. */
	AUTH_SIGNATURE_NO_MEMORY = AUTH_SIGNATURE_ERROR (0x01),			/**< Memory allocation failed. */
	AUTH_SIGNATURE_GET_SIG_FAILED = AUTH_SIGNATURE_ERROR (0x02),	/**< Failed to retrieve the authorizing signature from the payload. */
	AUTH_SIGNATURE_SIG_LENGTH_FAILED = AUTH_SIGNATURE_ERROR (0x03),	/**< Failed to determine the signature length in the payload. */
	AUTH_SIGNATURE_NO_SIGNATURE = AUTH_SIGNATURE_ERROR (0x04),		/**< No signature was found in the payload. */
};


#endif	/* AUTHORIZING_SIGNATURE_H_ */

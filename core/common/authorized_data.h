// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef AUTHORIZED_DATA_H_
#define AUTHORIZED_DATA_H_

#include <stddef.h>
#include <stdint.h>
#include "status/rot_status.h"


/**
 * Interface for extracting details about the structure of an authorized data payload used for
 * authorizing protected operations.
 */
struct authorized_data {
	/**
	 * Determine the byte offset in the authorized data payload where the authorization token is
	 * located.
	 *
	 * @param auth The authorized data parser.
	 * @param data The authorized data payload to parse.
	 * @param length Length of the authorized data.
	 * @param token_offset Output for the byte offset in the data payload for the authorization
	 * token.
	 *
	 * @return 0 if the token offset was retrieved successfully or an error code.  If the payload
	 * does not contain an authorization token, AUTH_DATA_NO_AUTH_TOKEN will be returned.
	 */
	int (*get_token_offset) (const struct authorized_data *auth, const uint8_t *data, size_t length,
		size_t *token_offset);

	/**
	 * Retrieve the additional authenticated data (AAD) contained in the authorized data payload.
	 *
	 * @param auth The authorized data parser.
	 * @param data The authorized data payload to parse.
	 * @param length Length of the authorized data.
	 * @param aad Output for the AAD contained in the payload.  This will be a pointer to a location
	 * in the data buffer.  If there is no AAD, this will be null.
	 * @param aad_length Output for the length of the AAD.  If there is no AAD, this will be 0.
	 *
	 * @return 0 if the AAD was retrieved successfully or an error code.
	 */
	int (*get_authenticated_data) (const struct authorized_data *auth, const uint8_t *data,
		size_t length, const uint8_t **aad, size_t *aad_length);

	/**
	 * Determine the length of the additional authenticated data (AAD) contained in the authorized
	 * data payload.
	 *
	 * @param auth The authorized data parser.
	 * @param data The authorized data payload to parse.
	 * @param length Length of the authorized data.
	 * @param aad_length Output for the length of the AAD contained in the payload.  If there is no
	 * AAD, this will be 0.
	 *
	 * @return 0 if the AAD length was retrieved successfully or an error code.
	 */
	int (*get_authenticated_data_length) (const struct authorized_data *auth, const uint8_t *data,
		size_t length, size_t *aad_length);
};


#define	AUTH_DATA_ERROR(code)		ROT_ERROR (ROT_MODULE_AUTH_DATA, code)

/**
 * Error codes that can be generated by authorized data handling.
 */
enum {
	AUTH_DATA_INVALID_ARGUMENT = AUTH_DATA_ERROR (0x00),	/**< Input parameter is null or not valid. */
	AUTH_DATA_NO_MEMORY = AUTH_DATA_ERROR (0x01),			/**< Memory allocation failed. */
	AUTH_DATA_TOKEN_OFFSET_FAILED = AUTH_DATA_ERROR (0x02),	/**< Failed to determine the token offset in the payload. */
	AUTH_DATA_GET_AAD_FAILED = AUTH_DATA_ERROR (0x03),		/**< Failed to retrieve the AAD from the payload. */
	AUTH_DATA_AAD_LENGTH_FAILED = AUTH_DATA_ERROR (0x04),	/**< Failed to determine the AAD length in the payload. */
	AUTH_DATA_NO_AUTH_TOKEN = AUTH_DATA_ERROR (0x05),		/**< The authorized data does not contain a token. */
	AUTH_DATA_BAD = AUTH_DATA_ERROR (0x06),					/**< Authorized data cannot be parsed. */
};


#endif	/* AUTHORIZED_DATA_H_ */

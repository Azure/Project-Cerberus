// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef AUTHORIZED_EXECUTION_H_
#define AUTHORIZED_EXECUTION_H_

#include <stdbool.h>
#include <stdint.h>
#include "status/rot_status.h"


/**
 * Handler for an operation that has been securely authorized for execution.  This only handles
 * execution of the operation.  Authorization that the operation is allowed to run must be handled
 * separately.
 */
struct authorized_execution {
	/**
	 * Execute the operation.
	 *
	 * @param execution Execution context for the operation being performed.
	 * @param reset_req Optional output to indicate when a device reset is requested after execution
	 * of the operation.  This will only be set if a reset is requested.  If no reset is requested
	 * by the operation, the value be unchanged by the call.  This can be null if not needed.
	 *
	 * @return 0 the operation executed successfully or an error code.
	 */
	int (*execute) (const struct authorized_execution *execution, bool *reset_req);

	/**
	 * Get the command status identifiers for the operation.  These identifiers are used for
	 * reporting command progress in status requests.
	 *
	 * @param execution Execution context to query.
	 * @param start Output for the identifier indicating the start of execution.
	 * @param error Output for the identifier indicating an error during execution.
	 */
	void (*get_status_identifiers) (const struct authorized_execution *execution, uint8_t *start,
		uint8_t *error);
};


#define	AUTHORIZED_EXECUTION_ERROR(code)		ROT_ERROR (ROT_MODULE_AUTHORIZED_EXECUTION, code)

/**
 * Error codes that can be generated by authorized operation execution.
 */
enum {
	AUTHORIZED_EXECUTION_INVALID_ARGUMENT = AUTHORIZED_EXECUTION_ERROR (0x00),	/**< Input parameter is null or not valid. */
	AUTHORIZED_EXECUTION_NO_MEMORY = AUTHORIZED_EXECUTION_ERROR (0x01),			/**< Memory allocation failed. */
	AUTHORIZED_EXECUTION_EXECUTE_FAILED = AUTHORIZED_EXECUTION_ERROR (0x02),	/**< Failed to execute the operation. */
};


#endif	/* AUTHORIZED_EXECUTION_H_ */

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#ifndef MCTP_CONTROL_PROTOCOL_OBSERVER_H_
#define MCTP_CONTROL_PROTOCOL_OBSERVER_H_

#include "cmd_interface/cmd_interface.h"
#include "status/rot_status.h"


/**
 * Interface for notifying observers of MCTP control protocol responses.  Unwanted event
 * notifications will be set to null.
 */
struct mctp_control_protocol_observer {
	/**
	 * Notification that a set EID request message has been received.
	 *
	 * Arguments passed with the notification will never be null.
	 *
	 * @param observer The observer instance being notified.
	 */
	void (*on_set_eid_request) (const struct mctp_control_protocol_observer *observer);

	/**
	 * Notification that a get message type response message has been received.
	 *
	 * Arguments passed with the notification will never be null.
	 *
	 * @param observer The observer instance being notified.
	 * @param reponse The response container received.
	 */
	void (*on_get_message_type_response) (const struct mctp_control_protocol_observer *observer,
		const struct cmd_interface_msg *response);

	/**
	 * Notification that a get vendor defined message support response message has been received.
	 *
	 * Arguments passed with the notification will never be null.
	 *
	 * @param observer The observer instance being notified.
	 * @param reponse The response container received.
	 */
	void (*on_get_vendor_def_msg_response) (const struct mctp_control_protocol_observer *observer,
		const struct cmd_interface_msg *response);

	/**
	 * Notification that a get routing table entries response message has been received.
	 *
	 * Arguments passed with the notification will never be null.
	 *
	 * @param observer The observer instance being notified.
	 * @param reponse The response container received.
	 */
	void (*on_get_routing_table_entries_response) (
		const struct mctp_control_protocol_observer *observer,
		const struct cmd_interface_msg *response);

	/**
	 * Notification that a discovery notify response message has been received.
	 *
	 * Arguments passed with the notification will never be null.
	 *
	 * @param observer The observer instance being notified.
	 * @param reponse The response container received.
	 */
	void (*on_discovery_notify_response) (const struct mctp_control_protocol_observer *observer,
		const struct cmd_interface_msg *response);
};


#define	MCTP_CONTROL_PROTOCOL_OBSERVER_ERROR(\
	code)  ROT_ERROR (ROT_MODULE_MCTP_CONTROL_PROTOCOL_OBSERVER, code)

/**
 * Error codes that can be generated by a MCTP protocol observer.
 */
enum {
	MCTP_CONTROL_PROTOCOL_OBSERVER_INVALID_ARGUMENT = MCTP_CONTROL_PROTOCOL_OBSERVER_ERROR (0x00),	/**< Input parameter is null or not valid. */
	MCTP_CONTROL_PROTOCOL_OBSERVER_NO_MEMORY = MCTP_CONTROL_PROTOCOL_OBSERVER_ERROR (0x01),			/**< Memory allocation failed. */
};


#endif	/* MCTP_CONTROL_PROTOCOL_OBSERVER_H_ */
